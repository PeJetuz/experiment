/*
 * Аутентификация
 * `Design First`, `Validated`
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: my_test@mail.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package my.test.rest.incomings.controllers.impl;

import jakarta.inject.Inject;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.Valid;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Response;
import my.test.authorization.rules.AuthFactory;
import my.test.authorization.rules.AuthenticateUserInteractor;
import my.test.authorization.rules.CreateUserInteractor;
import my.test.authorization.rules.ResponseFactory;
import my.test.rest.incomings.controllers.api.AuthenticationService;
import my.test.rest.incomings.controllers.api.dto.AuthInfo;
import my.test.rest.incomings.controllers.api.dto.TokenPair;

@Path("/api")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaHelidonServerCodegen")
public class AuthenticationServiceImpl implements AuthenticationService {

    private final AuthFactory authFactory;
    private final ResponseFactory responseFactory;

    @Inject
    public AuthenticationServiceImpl(AuthFactory authFactory, ResponseFactory responseFactory) {
        this.authFactory = authFactory;
        this.responseFactory = responseFactory;
    }

    public Response create(@Valid AuthInfo authInfo) {
        CreateUserInteractor createUserInteractor = authFactory
                .createNewUserInteractor(authInfo.getUserName(), authInfo.getPasswordHash(),
                        responseFactory.createCreationUserResponsePresenter());
        return createUserInteractor.createNewUserAndGetPresenter().renderModel();
    }

    public Response login(@Valid @NotNull AuthInfo authInfo) {
        AuthenticateUserInteractor authInteractor = authFactory.createAuthenticateUserInteractor(
                authInfo.getUserName(), authInfo.getPasswordHash(),
                responseFactory.createAuthenticationResponsePresenter());
        return authInteractor.authenticateAndGetPresenter().renderModel();
    }

    public void logout() {
    }

    public TokenPair refreshTokens() {
        TokenPair result = null;
        return result;
    }
}
