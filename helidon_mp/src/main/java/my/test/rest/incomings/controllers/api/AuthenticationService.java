/*
 * Аутентификация
 * `Design First`, `Validated`
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: my_test@mail.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package my.test.rest.incomings.controllers.api;

import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import my.test.rest.incomings.controllers.api.dto.AuthInfo;
import my.test.rest.incomings.controllers.api.dto.Authentication;
import my.test.rest.incomings.controllers.api.dto.TokenPair;

import jakarta.validation.Valid;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import org.eclipse.microprofile.openapi.annotations.media.Content;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;
import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaHelidonServerCodegen")
public interface AuthenticationService {

    @PUT
    @Path("/create")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @RequestBody(name = "greeting",
            required = true,
            content = @Content(mediaType = "application/json",
                    schema = @Schema(type = SchemaType.OBJECT, requiredProperties = {"greeting"})))
    @APIResponses({
            @APIResponse(name = "normal", responseCode = "200", description = "Greeting updated"),
            @APIResponse(name = "incorrect name or password", responseCode = "403",
                    description = "incorrect name or password")
    })
    Response create(@Valid AuthInfo authInfo);

    @POST
    @Path("/login")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @APIResponses({
            @APIResponse(name = "normal", responseCode = "200", description = "Greeting updated",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = Authentication.class))}),
            @APIResponse(name = "incorrect name or password", responseCode = "401",
                    description = "incorrect name or password"),
            @APIResponse(name = "no permissions", responseCode = "403",
                    description = "Login and password are correct, but the user does not have a valid role")
    })
    Response login(@Valid @NotNull AuthInfo authInfo);

    @GET
    @Path("/logout")
    void logout();

    @GET
    @Path("/tokens/refresh")
    @Produces({"application/json"})
    TokenPair refreshTokens();
}
